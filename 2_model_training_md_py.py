# -*- coding: utf-8 -*-
"""2_model_training-md.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14d6VGJt0jeC2ZHLDVyzXPqzSSsCN44HF

2
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
import pickle

class LoanModelTrainer:
    def __init__(self, csv_path):
        self.csv_path = csv_path
        self.model = None

    def load_data(self):
        df = pd.read_csv(self.csv_path)
        categorical_cols = ['person_gender', 'person_education', 'person_home_ownership',
                            'loan_intent', 'previous_loan_defaults_on_file']
        df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
        df.dropna(inplace=True)
        X = df.drop('loan_status', axis=1)
        y = df['loan_status']
        return train_test_split(X, y, test_size=0.2, random_state=42)

    def preprocess(self, X_train, X_test):
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        return X_train_scaled, X_test_scaled

    def train_models(self, X_train, X_test, y_train, y_test):
        rf_model = RandomForestClassifier(random_state=42)
        rf_model.fit(X_train, y_train)
        rf_acc = accuracy_score(y_test, rf_model.predict(X_test))

        xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        xgb_model.fit(X_train, y_train)
        xgb_acc = accuracy_score(y_test, xgb_model.predict(X_test))

        if rf_acc >= xgb_acc:
            self.model = rf_model
            print("Best Model: Random Forest | Accuracy:", rf_acc)
        else:
            self.model = xgb_model
            print("Best Model: XGBoost | Accuracy:", xgb_acc)

    def save_model(self, path='best_model.pkl'):
        with open(path, 'wb') as f:
            pickle.dump(self.model, f)

if __name__ == "__main__":
    trainer = LoanModelTrainer("Dataset_A_loan.csv")
    X_train, X_test, y_train, y_test = trainer.load_data()
    X_train_scaled, X_test_scaled = trainer.preprocess(X_train, X_test)
    trainer.train_models(X_train_scaled, X_test_scaled, y_train, y_test)
    trainer.save_model("best_model.pkl")